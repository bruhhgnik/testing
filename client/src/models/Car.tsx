/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 car.glb --types 
Author: dirq3d (https://sketchfab.com/dirq)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/lowpoly-f1-car-bb2e0ace465a4e79b19e6eeba1bdcaf6
Title: Lowpoly F1 Car
*/

import * as THREE from 'three'
import React, { useMemo } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/car.glb') as GLTFResult

  // Clone and configure material to ensure proper rendering
  const carMaterial = useMemo(() => {
    const mat = materials.Material.clone();

    // Enable vertex colors if the geometry has them
    mat.vertexColors = (nodes.Object_2.geometry.attributes.color !== undefined);

    // Configure material properties
    mat.metalness = 0.3;
    mat.roughness = 0.7;
    mat.side = THREE.DoubleSide;

    // If there's a texture map, configure it
    if (mat.map) {
      // @ts-ignore - Three.js version compatibility
      mat.map.colorSpace = 'srgb';
      mat.map.needsUpdate = true;
    }

    // Ensure the material reflects light properly
    mat.needsUpdate = true;

    return mat;
  }, [materials.Material, nodes.Object_2.geometry]);

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Object_2.geometry}
        material={carMaterial}
        rotation={[0, Math.PI /2, 0]}
        castShadow
        receiveShadow
      />
    </group>
  )
}

useGLTF.preload('/car.glb')
